{"tagline":"A tool for securing communications between a client and a DNS resolver","body":"DNSCrypt\r\n========\r\n\r\nA tool for securing communications between a client and a DNS resolver.\r\n\r\nDescription\r\n-----------\r\n\r\nDNSCrypt is a slight variation on [DNSCurve](http://www.dnscurve.org/).\r\n\r\nDNSCurve improves the confidentiality and integrity of DNS requests using\r\nhigh-speed high-security elliptic-curve cryptography. Best of all,\r\nDNSCurve has very low overhead and adds virtually no latency to\r\nqueries.\r\n\r\nDNSCurve aims at securing the entire chain down to authoritative\r\nservers. However, it only works with authoritative servers that explicitly\r\nsupport the protocol. And unfortunately, DNSCurve hasn't received much\r\nadoption yet.\r\n\r\nThe DNSCrypt protocol is very similar to DNSCurve, but focuses on\r\nsecuring communications between a client and its first-level resolver.\r\nWhile not providing end-to-end security, it protects the local\r\nnetwork (which is often the weakest link in the chain) against\r\nman-in-the-middle attacks. It also provides some confidentiality to\r\nDNS queries.\r\n\r\nThe DNSCrypt daemon acts as a DNS proxy between a regular client, like\r\na DNS cache or an operating system stub resolver, and a DNSCrypt-aware\r\nresolver, like OpenDNS.\r\n\r\nInstallation\r\n------------\r\n\r\nThe daemon is known to work on recent versions of OSX, OpenBSD, Bitrig,\r\nNetBSD, Dragonfly BSD, FreeBSD, Linux, iOS (requires a jailbroken\r\ndevice), Solaris (SmartOS) and Windows (requires MingW).\r\n\r\nDownload the\r\n[latest version](https://github.com/opendns/dnscrypt-proxy/downloads)\r\nand extract it:\r\n\r\n    $ bunzip2 -cd dnscrypt-proxy-*.tar.bz2 | tar xvf -\r\n    $ cd dnscrypt-proxy-*\r\n\r\nCompile and install it using the standard procedure:\r\n\r\n    $ ./configure && make -j2\r\n    # make install\r\n\r\nReplace `-j2` with whatever number of CPU cores you want to use for the\r\ncompilation process.\r\n\r\nRunning `make -j2 test` in the `src/libnacl` directory is also highly\r\nrecommended.\r\n\r\nThe proxy will be installed as `/usr/local/sbin/dnscrypt-proxy` by default.\r\n\r\nCommand-line switches are documented in the `dnscrypt-proxy(8)` man page.\r\n\r\nUsage\r\n-----\r\n\r\nHaving a dedicated system user, with no privileges and with an empty\r\nhome directory, is highly recommended. For extra security, DNSCrypt\r\nwill chroot() to this user's home directory and drop root privileges\r\nfor this user's uid as soon as possible.\r\n\r\nThe easiest way to start the daemon is:\r\n\r\n    # dnscrypt-proxy --daemonize\r\n\r\nThe proxy will accept incoming requests on 127.0.0.1, tag them with an\r\nauthentication code, forward them to OpenDNS resolvers, and validate\r\neach answer before passing it to the client.\r\n\r\nGiven such a setup, in order to actually start using DNSCrypt, you\r\nneed to update your `/etc/resolv.conf` file and replace your current\r\nset of resolvers with:\r\n\r\n    nameserver 127.0.0.1\r\n\r\nOther common command-line switches include:\r\n\r\n* `--daemonize` in order to run the server as a background process.\r\n* `--local-address=<ip>[:port]` in order to locally bind a different IP\r\naddress than 127.0.0.1\r\n* `--logfile=<file>` in order to write log data to a dedicated file. By\r\n  default, logs are sent to stdout if the server is running in foreground,\r\n  and to syslog if it is running in background.\r\n* `--max-active-requests=<count>` to set the maximum number of active\r\n  requests. The default value is 250.\r\n* `--pid-file=<file>` in order to store the PID number to a file.\r\n* `--user=<user name>` in order to chroot()/drop privileges.\r\n\r\nDNSCrypt comes pre-configured for OpenDNS, although the\r\n`--resolver-address=<ip>[:port]`,\r\n`--provider-name=<certificate provider FQDN>`\r\nand `--provider-key=<provider public key>` can be specified in\r\norder to change the default settings.\r\n\r\nInstallation as a service (Windows only)\r\n----------------------------------------\r\n\r\nThe proxy can be installed as a Windows service.\r\n\r\nCopy the `dnscrypt-proxy.exe` file to any location, then open a\r\nterminal and type (eventually with the full path to `dnscrypt-proxy.exe`):\r\n\r\n    dnscrypt-proxy.exe --install\r\n\r\nIt will install a new service named `dnscrypt-proxy`.\r\n\r\nAfter being stopped, the service can be removed with:\r\n\r\n    dnscrypt-proxy.exe --uninstall\r\n\r\nUsing DNSCrypt in combination with a DNS cache\r\n----------------------------------------------\r\n\r\nThe DNSCrypt proxy is **not** a DNS cache. This means that incoming\r\nqueries will **not** be cached and every single query will require a\r\nround-trip to the upstream resolver.\r\n\r\nFor optimal performance, the recommended way of running DNSCrypt is to\r\nrun it as a forwarder for a local DNS cache, like `unbound` or\r\n`powerdns-recursor`.\r\n\r\nBoth can safely run on the same machine as long as they are listening\r\nto different IP addresses (preferred) or different ports.\r\n\r\nIf your DNS cache is `unbound`, all you need is to edit the\r\n`unbound.conf` file and add the following lines at the end of the `server`\r\nsection:\r\n\r\n    do-not-query-localhost: no\r\n\r\n    forward-zone:\r\n      name: \".\"\r\n      forward-addr: 127.0.0.1@40\r\n\r\nThe first line is not required if you are using different IP addresses\r\ninstead of different ports.\r\n\r\nThen start `dnscrypt-proxy`, telling it to use a specific port (`40`, in\r\nthis example):\r\n\r\n    # dnscrypt-proxy --local-address=127.0.0.1:40 --daemonize\r\n\r\nIPv6 support\r\n------------\r\n\r\nIPv6 is fully supported. IPv6 addresses with a port number should be\r\nspecified as [ip]:port\r\n\r\n    # dnscrypt-proxy --local-address='[::1]:40' --daemonize\r\n\r\nQueries using nonstandard ports / over TCP\r\n------------------------------------------\r\n\r\nSome routers and firewalls can block outgoing DNS queries or\r\ntransparently redirect them to their own resolver. This especially\r\nhappens on public Wifi hotspots, such as coffee shops.\r\n\r\nAs a workaround, the port number can be changed using\r\nthe `--resolver-port=<port>` option. For example, OpenDNS servers\r\nreply to queries sent to ports 53, 443 and 5353.\r\n\r\nBy default, dnscrypt-proxy sends outgoing queries to UDP port 443.\r\n\r\nIn addition, the DNSCrypt proxy can force outgoing queries to be\r\nsent over TCP. For example, TCP port 443, which is commonly used for\r\ncommunication over HTTPS, may not be filtered.\r\n\r\nThe `--tcp-only` command-line switch forces this behavior. When\r\nan incoming query is received, the daemon immediately replies with a\r\n\"response truncated\" message, forcing the client to retry over TCP.\r\nThe daemon then authenticates the query and forwards it over TCP\r\nto the resolver.\r\n\r\n`--tcp-only` is slower than UDP, and this workaround should never be used\r\nexcept when bypassing a filter is actually required. Moreover,\r\nmultiple queries over a single TCP connections aren't supported yet.\r\n\r\nEDNS payload size\r\n-----------------\r\n\r\nDNS packets sent over UDP have been historically limited to 512 bytes,\r\nwhich is usually fine for queries, but sometimes a bit short for\r\nreplies.\r\n\r\nMost modern authoritative servers, resolvers and stub resolvers\r\nsupport the Extension Mechanism for DNS (EDNS) that, among other\r\nthings, allows a client to specify how large a reply over UDP can be.\r\n\r\nUnfortunately, this feature is disabled by default on a lot of\r\noperating systems. It has to be explicitly enabled, for example by\r\nadding `options edns0` to the `/etc/resolv.conf` file on most\r\nUnix-like operating systems.\r\n\r\n`dnscrypt-proxy` can transparently rewrite outgoing packets before\r\nauthenticating them, in order to add the EDNS0 mechanism. By\r\ndefault, a conservative payload size of 1252 bytes is advertised.\r\n\r\nThis size can be made larger by starting the proxy with the\r\n`--edns-payload-size=<bytes>` command-line switch. Values up to 4096\r\nare usually safe.\r\n\r\nA value below or equal to 512 will disable this mechanism, unless a\r\nclient sends a packet with an OPT section providing a payload size.\r\n\r\nThe `hostip` utility\r\n--------------------\r\n\r\nThe DNSCrypt proxy ships with a simple tool named `hostip` that\r\nresolves a name to IPv4 or IPv6 addresses.\r\n\r\nThis tool can be useful for starting some services before\r\n`dnscrypt-proxy`.\r\n\r\nQueries made by `hostip` are not authenticated.\r\n\r\nGUIs for dnscrypt-proxy\r\n-----------------------\r\n\r\nIf you need a simple graphical user interface in order to start/stop\r\nthe proxy and change your DNS settings, check out the following\r\nprojects:\r\n\r\n- [DNSCrypt OSX Client](https://github.com/opendns/dnscrypt-osx-client):\r\na preferences pane, a menu bar indicator and a service to change the\r\nDNS settings. OSX only, written in Objective C. Experimental.\r\n\r\n- [DNSCrypt WinClient](https://github.com/Noxwizard/dnscrypt-winclient):\r\nEasily enable/disable DNSCrypt on multiple adapters. Supports\r\ndifferent ports and protocols, IPv6, parental controls and the proxy\r\ncan act as a gateway service. Windows only, written in .NET.\r\n\r\n- [DNSCrypt Win Client](https://github.com/opendns/dnscrypt-win-client):\r\nOfficial GUI for Windows, by OpenDNS. Also known as \"OpenDNSCrypt\".\r\n\r\n- dnscrypt-proxy is also available on Cydia, and it can be easily\r\nenabled using [GuizmoDNS](http://modmyi.com/cydia/com.guizmo.dns).\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"DNSCrypt"}